// moderncpp007.cpp : 친화수 짝을 출력하는 프로그램 구현하기
//                    1000000 보다 작은 모든 친화수 짝을 출력하라.
//
//    * 친화수란?
//피타고라스(Pythagoras) - 친화수(親和數 : Amicable Number)
//
//‘친화수(親和數 : Amicable Number)’라 하여 ‘각 진약수의 합이 상대의 수가 되는 두 수’, 예를 들면 220과 284 같은 수도 있다.
//이런 이름이 붙게 된 것은 220의 진약수의 합이 1 + 2 + 4 + 5 + 10 + 11 + 20 + 22 + 44 + 55 + 110 = 284가 되고, 
//284의 진약수의 합이 1 + 2 + 4 + 71 + 142 = 220이 되기 때문이다.
//
//피타고라스는 “친구란 무엇인가 ? ”란 질문을 받고 220과 284를 지적하면서 “또 다른 나”라고 대답하였다고 한다.
//피타고라스 이후 현재까지 많은 수학자들이 완전수와 친화수를 찾으려고 노력한 것을 보면 피타고라스가 수학에 미친 영향을 짐작할 수 있을 것이다.
//
//대표적인 친화수를 살펴보면(1, 184, 1, 210), (2, 620, 2, 924), (12, 285, 14, 595)와 같이 
//짝수는 짝수끼리, 홀수는 홀수끼리 서로 쌍이 되고 있는데, 피타고라스 학파가 짝수는 여성, 홀수는 남성을 나타낸다고 보았기 때문에 
//친화수는 동성인 수가 되며, 우정을 상징하는 수로도 알려져 있다.
//그런 의미에서 친화수는 ‘친구수(親舊數)’ 또는 ‘우애수(友愛數)’라 불리기도 한다.
//
//한편, 친화수와 관련해 2000년 동안 친화수가 220과 284의 한 쌍밖에 없다고 생각하던 중에,
//1636년 페르마가 또 다른 쌍인 17, 926과 18, 416을 발견하였는데,
//이는 이미 훨씬 전에 아라비아의 수학자였던 무함마드 알파리시가 발견한 것을 페르마가 재발견한 것이라고 한다.
//
//실제로 아라비아에서는 이에 대한 연구가 깊어 각종 수학책들을 번역한 사비트 이븐 쿠라는 친화수를 찾는 법칙을 밝혀냈으며,
//바키르 야즈디는 17세기에 친화수 9, 363, 584와 9, 437, 056을 찾아내기도 했다.
//이런 상황에서 페르마의 발표가 있은 지 2년 뒤에 프랑스의 수학자 데카르트가 세 번째 친화수를 발표하였고,
//또 스위스 수학자인 오일러는 친화수에 대한 체계적인 연구에 착수하여 1747년에 무려 30쌍을 한꺼번에 발표했으며,
//그 후에도 60쌍 이상의 친화수를 발견하였다.
//
//아무튼 그 후로 수학자들은 친화수를 찾아내려고 많은 노력을 기울였지만, 
//1867년 뜻밖에도 열여섯 살의 이탈리아 소년인 니콜로 파나니니가 다른 수학자들이 모두 놓친 
//1,184와 1,210이 친화수임을 찾아냄으로써 수학사에 그 이름을 당당히 올리게 되었다.


#include <iostream>
#include <string>

using namespace std;

#define MAX_NUM 1000000

int nSum[MAX_NUM];

int main()
{
    int nNum;

    cout << MAX_NUM << " 이하의 정수를 입력하세요." << endl;
    cin >> nNum;


    for (int i = 2; i <= nNum; i++)
    {
        int n_tmpSum=0;
        for (int j = 1; j < i; j++)
        {
            if (i % j == 0)
            {
                n_tmpSum += j;
            }
        }
        nSum[i] = n_tmpSum;
    }

    cout << " " << nNum << "까지의 친화수 List: " << endl; 
    
    for (int i = 2; i <= nNum; i++)
	{
		if (nSum[i] != 1 && nSum[i] != i && (i == nSum[nSum[i]]) && i <= nSum[i] )
		{
			cout << "(" << i << " , " << nSum[i] << ")" << endl;

			cout << "  <" << i << "> : ";
			for (int k = 1; k < i; k++)
			{
				if (i % k == 0)
				{
					cout << k << " ";
				}
			}
			cout << endl;
			cout << "  <" << nSum[i] << "> : ";
			for (int k = 1; k < nSum[i]; k++)
			{
				if (nSum[i] % k == 0)
				{
					cout << k << " ";
				}
			}
			cout << endl;
		}
	}

    return 0;
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
